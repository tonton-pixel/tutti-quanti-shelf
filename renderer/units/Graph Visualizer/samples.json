[
    {
        "label": "Graphviz Examples",
        "items":
        [
            {
                "label": "Basic",
                "string": "digraph { a -> b }"
            },
            {
                "label": "Gradients",
                "string": "digraph G\n{\n    bgcolor=\"purple:pink\"\n    label=\"agraph\"\n    fontcolor=\"white\"\n    subgraph cluster1\n    {\n        fillcolor=\"blue:cyan\"\n        label=\"acluster\"\n        fontcolor=\"white\"\n        style=\"filled\"\n        gradientangle=\"270\"\n\t\tnode\n        [\n            shape=box\n            fillcolor=\"red:yellow\"\n            style=\"filled\"\n            gradientangle=90\n        ]\n\t\tanode\n\t}\n} \n\n"
            },
            {
                "label": "Traffic Lights",
                "string": "##\"I played some days with making an interface between our ConceptBase system (essentially a database system to store models) and graphviz. One example graph is attached. It is a so-called petri net for Dutch traffic lights. The example is actually taken from a book by Wil van der Aalst.\" Contributed by Manfred Jeusfeld.\n\n##Command to produce the output: \"neato -Tpng thisfile > thisfile.png\"\n\ndigraph TrafficLights {\nnode [shape=box];  gy2; yr2; rg2; gy1; yr1; rg1;\nnode [shape=circle,fixedsize=true,width=0.9];  green2; yellow2; red2; safe2; safe1; green1; yellow1; red1;\ngy2->yellow2;\nrg2->green2;\nyr2->safe1;\nyr2->red2;\nsafe2->rg2;\ngreen2->gy2;\nyellow2->yr2;\nred2->rg2;\ngy1->yellow1;\nrg1->green1;\nyr1->safe2;\nyr1->red1;\nsafe1->rg1;\ngreen1->gy1;\nyellow1->yr1;\nred1->rg1;\n\noverlap=false\nlabel=\"PetriNet Model TrafficLights\\nExtracted from ConceptBase and layed out by Graphviz\"\nfontsize=12;\n}\n\n"
            }
        ]
    },
    {
        "label": "Neato User's Manual",
        "items":
        [
            {
                "label": "Example 1",
                "string": "graph G { n0 -- n1 -- n2 -- n3 -- n0; }"
            },
            {
                "label": "Example 2",
                "string": "graph G\n{\n    run -- intr;\n    intr -- runbl;\n    runbl -- run;\n    run -- kernel;\n    kernel -- zombie;\n    kernel -- sleep;\n    kernel -- runmem;\n    sleep -- swap;\n    swap -- runswap;\n    runswap -- new;\n    runswap -- runmem;\n    new -- runmem;\n    sleep -- runmem;\n}"
            }
        ]
    },
    {
        "label": "Unihan Variants",
        "items":
        [
            {
                "label": "Goose Variants",
                "string": "digraph G\n{\n    node\n    [\n        shape = circle,\n        fixedsize = true,\n        width = 0.75,\n        fontsize = 36\n        fontname = \"system-ui, sans-serif\"\n    ]\n    \"鵝\" -> \"鵞\"\n    \"鵝\" -> \"鹅\"\n    \"鵞\" -> \"鵝\"\n    \"鹅\" -> \"鵝\"\n}\n"
            }
        ]
    }
]